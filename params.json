{
  "name": "CHARIOT",
  "tagline": "Architecture for IoT",
  "body": "# CHARIOT [![Build Status](https://travis-ci.org/2020saurav/chariot-server.svg?branch=master)](https://travis-ci.org/2020saurav/chariot-server)\r\nCHARIOT is a framework to simplify request processing for Internet of Things. The idea is to do heavy computations on\r\nlegacy machines such as desktops or laptops rather than on IoT devices such as sensors or web cameras. This eliminates\r\nrequirement of powerful RAM or processors for any task on IoT devices and saves battery power of such devices. This\r\nidea is inspired from Pub-Sub pattern and RPC protocol.\r\n\r\nThis work was done as a course project in CS654A Software Architecture by Abhilash Kumar and Saurav Kumar at IIT Kanpur.\r\n\r\n## Nomenclature\r\nIn a chariot, the functionality (of movement) is provided by the wagon but the actual hard work is done by the horses.\r\nSymbolically, in this architecture the IoT devices become the wagon which has its own functionality but the processing\r\nshall be done by machines with high computational resources. Names of components:\r\n* Processing Machines : Ashva (Sanskrit for horse)\r\n* Coordinating Machines : Prashti (Sanskrit for horse leader)\r\n* Zookeeper : Turagraksa (Sanskrit for patron of horse)\r\n\r\n## Architecture\r\n\r\n![logical](https://cloud.githubusercontent.com/assets/3881510/14587134/da32e114-04ca-11e6-88f4-0b8155ac2c6f.png)\r\n\r\n![physical](https://cloud.githubusercontent.com/assets/3881510/14587133/d005e376-04ca-11e6-8ede-991a7f1a843d.png)\r\n\r\n![process](https://cloud.githubusercontent.com/assets/3881510/14587124/a9d13458-04ca-11e6-8011-88d12b1a9859.png)\r\n\r\n## Understanding the system\r\nTODO\r\n\r\n\r\n## Build and Deployment\r\nThis is a Gradle project which should be built using `gradle build`. The `build.gradle` file contains several tasks\r\nto deploy AshvaServer, PrashtiServer, ZookeeperServer, run different intergration tests and build complete jar.\r\nDeployment is faster without using Gradle.\r\n```bash\r\ngradle -q buildCompleteJar\r\njava -cp path/to/completejar in.cs654...Server\r\n```\r\n## Building applications for CHARIOT framework\r\nWriting applications for CHARIOT framework is very simple and elegant. To build applications, developers need to create\r\na docker image which has the right functions in it. This docker image runs on the chariot-server. For simplification,\r\na base docker image `2020saurav/chariot:1.0` should be used (recommended). This image is built on Ubuntu 14.04 and has\r\nscripts to parse requests and responses into objects from bytes. One just needs to add the relevant functions for\r\nexecution of RPC functions.\r\n\r\n### Building your docker image\r\n```bash\r\ndocker pull 2020saurav/chariot:1.0\r\ndocker run -t -i 2020saurav/chariot:1.0 /bin/bash\r\ncd ~/chariot\r\nvi handler.py\r\n```\r\nThe `handler.py` looks like:\r\n```python\r\n#!/usr/bin/python3\r\n\r\ndef handle(request):\r\n  return globals()[request['function_name']]()\r\n\r\ndef testFunc():\r\n  return {'answer': '42'}\r\n```\r\n\r\nEdit `handler.py` to create any function, but remember to return a dictionary. The keys in the dictionary will be used\r\nto extract values from the response sent to the client. The RPC client can be in any language. At present, we are\r\nproviding support for python inside docker image. If you dig deeper, it is super simple to create interface in any\r\nlanguage. `/bin/chariot` in the docker image is the executable that is called by the Ashva processor. This executable\r\ntransfers the request to handler.py (by importing it).\r\n\r\nOnce `handler.py` is edited and ready to work, exit from the container\r\n```bash\r\nexit\r\ndocker commit -m \"Commit message\" -a \"Name of author\" <-container-id-> <-username/newImageName:version->\r\ndocker push <-username/newImageName:version-> # to push it to docker hub. requires to be logged in\r\n```\r\n\r\nOnce the docker image is ready, making calls to chariot server is even easier.\r\n\r\n### Java Application\r\n\r\n* Import chariot jar into your project (available under releases)\r\n* Make a request:\r\n```java\r\nPrashtiClient client = new PrashtiClient();\r\nBasicRequest request = BasicRequest.newBuilder()\r\n        .setRequestId(CommonUtils.randomString(32))\r\n        .setDeviceId(<deviceId>)\r\n        .setFunctionName(<functionName>)\r\n        .setArguments(new ArrayList<String>())\r\n        .setExtraData(new HashMap<String, String>())\r\n        .build();\r\nBasicResponse response = client.call(request);\r\n```\r\n\r\n### Python Application\r\n* Import chariot library (available [here](https://github.com/2020saurav/chariot-pyclient))\r\n* Make a request:\r\n```python\r\n#!/usr/bin/python3\r\nfrom chariot import *\r\nclient = PrashtiClient()\r\nrequest = {\r\n    'device_id' : <deviceId>,\r\n    'request_id' : randomReqId(),\r\n    'function_name' : <functionName>,\r\n    'arguments' : [],\r\n    'extra_data' : {}\r\n}\r\nresponse = client.call(request)\r\n```\r\n\r\n### FUTURE WORKS\r\n* Authentication\r\n* Encryption\r\n* IPv6 support (very minor changes required)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}